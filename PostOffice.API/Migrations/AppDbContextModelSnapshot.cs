// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PostOffice.API.Data.Context;

#nullable disable

namespace PostOffice.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "1f3bb326-20d2-4a3d-abb3-890c6d5c0e6b",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78a7007c-0211-48ae-af5b-cda33296450d",
                            Create_date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "onlinepostofficegroup4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pham",
                            LastName = "Chien",
                            LockoutEnabled = false,
                            NormalizedEmail = "onlinepostofficegroup4@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxJ3Qkwda6GWSiTa4wwqJ7fT4wFDCrBLriByK6I11gPdw0JXHm34xoBoDQR0uMwPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Models.Area", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("area_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Models.MoneyOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("MoneyServicePriceid")
                        .HasColumnType("int");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("parcel_type_id")
                        .HasColumnType("int");

                    b.Property<string>("payer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("receive_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("receiver_address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("receiver_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("receiver_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("receiver_national_identity_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("receiver_phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("receiver_pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("send_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("sender_address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("sender_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("sender_national_identity_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("sender_phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("sender_pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("service_id")
                        .HasColumnType("int");

                    b.Property<float>("total_charge")
                        .HasColumnType("real");

                    b.Property<float>("transfer_fee")
                        .HasColumnType("real");

                    b.Property<string>("transfer_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("transfer_value")
                        .HasColumnType("real");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("MoneyServicePriceid");

                    b.HasIndex("receiver_pincode");

                    b.HasIndex("sender_pincode");

                    b.HasIndex("user_id");

                    b.ToTable("MoneyOrder", (string)null);
                });

            modelBuilder.Entity("Models.MoneyScope", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<float>("max_value")
                        .HasColumnType("real")
                        .HasColumnName("max_value");

                    b.Property<float>("min_value")
                        .HasColumnType("real")
                        .HasColumnName("min_value");

                    b.HasKey("id");

                    b.ToTable("MoneyScope", (string)null);
                });

            modelBuilder.Entity("Models.MoneyServicePrice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<float>("fee")
                        .HasColumnType("real");

                    b.Property<int>("money_scope_id")
                        .HasColumnType("int");

                    b.Property<int>("zone_type_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("money_scope_id");

                    b.HasIndex("zone_type_id");

                    b.ToTable("MoneyServicePrice", (string)null);
                });

            modelBuilder.Entity("Models.OfficeBranch", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branch_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branch_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("pincode");

                    b.ToTable("OfficeBranchs", (string)null);
                });

            modelBuilder.Entity("Models.ParcelOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("desciption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("order_status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("parcel_height")
                        .HasColumnType("real");

                    b.Property<float>("parcel_length")
                        .HasColumnType("real");

                    b.Property<int>("parcel_type_id")
                        .HasColumnType("int");

                    b.Property<float>("parcel_weight")
                        .HasColumnType("real");

                    b.Property<float>("parcel_width")
                        .HasColumnType("real");

                    b.Property<string>("payer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("payment_method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("receive_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("receiver_address")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("receiver_email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("receiver_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("receiver_phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("receiver_pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("send_date")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("sender_address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("sender_email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("sender_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("sender_phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("sender_pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("service_id")
                        .HasColumnType("int");

                    b.Property<float>("total_charge")
                        .HasColumnType("real");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("vpp_value")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("parcel_type_id");

                    b.HasIndex("receiver_pincode");

                    b.HasIndex("sender_pincode");

                    b.HasIndex("service_id");

                    b.HasIndex("user_id");

                    b.ToTable("ParcelOrder", (string)null);
                });

            modelBuilder.Entity("Models.ParcelService", b =>
                {
                    b.Property<int>("service_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("service_id"), 1L, 1);

                    b.Property<int>("delivery_time")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("service_id");

                    b.ToTable("ParcelServices", (string)null);
                });

            modelBuilder.Entity("Models.ParcelServicePrice", b =>
                {
                    b.Property<int>("parcel_price_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("parcel_price_id"), 1L, 1);

                    b.Property<int>("parcel_type_id")
                        .HasColumnType("int");

                    b.Property<int>("scope_weight_id")
                        .HasColumnType("int");

                    b.Property<int>("service_id")
                        .HasColumnType("int");

                    b.Property<float>("service_price")
                        .HasColumnType("real");

                    b.Property<int>("zone_type_id")
                        .HasColumnType("int");

                    b.HasKey("parcel_price_id");

                    b.HasIndex("parcel_type_id");

                    b.HasIndex("scope_weight_id");

                    b.HasIndex("service_id");

                    b.HasIndex("zone_type_id");

                    b.ToTable("ParcelServicePrice", (string)null);
                });

            modelBuilder.Entity("Models.ParcelType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("max_height")
                        .HasColumnType("real");

                    b.Property<float>("max_length")
                        .HasColumnType("real");

                    b.Property<float>("max_weight")
                        .HasColumnType("real");

                    b.Property<float>("max_width")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("over_dimension_rate")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("ParcelType", (string)null);
                });

            modelBuilder.Entity("Models.Pincode", b =>
                {
                    b.Property<string>("pincode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("area_id")
                        .HasColumnType("int");

                    b.Property<string>("city_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pincode");

                    b.HasIndex("area_id");

                    b.ToTable("Pincodes", (string)null);
                });

            modelBuilder.Entity("Models.TrackHistory", b =>
                {
                    b.Property<int>("track_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("track_id"), 1L, 1);

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("employee_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("new_location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("new_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("update_time")
                        .HasColumnType("datetime2");

                    b.HasKey("track_id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("order_id");

                    b.ToTable("TrackHistories");
                });

            modelBuilder.Entity("Models.WeightScope", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<float>("max_weight")
                        .HasColumnType("real");

                    b.Property<float>("min_weight")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("WeightScope", (string)null);
                });

            modelBuilder.Entity("Models.ZoneType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("zone_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ZoneTypes", (string)null);
                });

            modelBuilder.Entity("Models.MoneyOrder", b =>
                {
                    b.HasOne("Models.MoneyServicePrice", "MoneyServicePrice")
                        .WithMany()
                        .HasForeignKey("MoneyServicePriceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Pincode", "MoneyReceiverPincode")
                        .WithMany("ReceiverPincodeMO")
                        .HasForeignKey("receiver_pincode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Pincode", "MoneySenderPincode")
                        .WithMany("SenderPincodeMO")
                        .HasForeignKey("sender_pincode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.AppUser", "AppUser")
                        .WithMany("MoneyOrders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("MoneyReceiverPincode");

                    b.Navigation("MoneySenderPincode");

                    b.Navigation("MoneyServicePrice");
                });

            modelBuilder.Entity("Models.MoneyServicePrice", b =>
                {
                    b.HasOne("Models.MoneyScope", "MoneyScopes")
                        .WithMany("MoneyServicePrice")
                        .HasForeignKey("money_scope_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ZoneType", "ZoneTypes")
                        .WithMany("MoneyServicePrice")
                        .HasForeignKey("zone_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyScopes");

                    b.Navigation("ZoneTypes");
                });

            modelBuilder.Entity("Models.OfficeBranch", b =>
                {
                    b.HasOne("Models.Pincode", "Pincode")
                        .WithMany("OfficeBranches")
                        .HasForeignKey("pincode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pincode");
                });

            modelBuilder.Entity("Models.ParcelOrder", b =>
                {
                    b.HasOne("Models.ParcelType", "ParcelType")
                        .WithMany("ParcelOrders")
                        .HasForeignKey("parcel_type_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Pincode", "ParcelReceiverPincode")
                        .WithMany("ReceiverPincodePO")
                        .HasForeignKey("receiver_pincode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Pincode", "ParcelSenderPincode")
                        .WithMany("SenderPincodePO")
                        .HasForeignKey("sender_pincode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.ParcelService", "ParcelService")
                        .WithMany("ParcelOrders")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.AppUser", "AppUser")
                        .WithMany("ParcelOrders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("ParcelReceiverPincode");

                    b.Navigation("ParcelSenderPincode");

                    b.Navigation("ParcelService");

                    b.Navigation("ParcelType");
                });

            modelBuilder.Entity("Models.ParcelServicePrice", b =>
                {
                    b.HasOne("Models.ParcelType", "ParcelTypes")
                        .WithMany("ParcelServicePrice")
                        .HasForeignKey("parcel_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.WeightScope", "WeightScopes")
                        .WithMany("ParcelServicePrice")
                        .HasForeignKey("scope_weight_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ParcelService", "ParcelServices")
                        .WithMany("ParcelServicePrice")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ZoneType", "ZoneTypes")
                        .WithMany("ParcelServicePrice")
                        .HasForeignKey("zone_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParcelServices");

                    b.Navigation("ParcelTypes");

                    b.Navigation("WeightScopes");

                    b.Navigation("ZoneTypes");
                });

            modelBuilder.Entity("Models.Pincode", b =>
                {
                    b.HasOne("Models.Area", "Area")
                        .WithMany("Pincodes")
                        .HasForeignKey("area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Models.TrackHistory", b =>
                {
                    b.HasOne("Models.AppUser", "Employee")
                        .WithMany("Histories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ParcelOrder", "ParcelOrder")
                        .WithMany("TrackHistories")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ParcelOrder");
                });

            modelBuilder.Entity("Models.AppUser", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("MoneyOrders");

                    b.Navigation("ParcelOrders");
                });

            modelBuilder.Entity("Models.Area", b =>
                {
                    b.Navigation("Pincodes");
                });

            modelBuilder.Entity("Models.MoneyScope", b =>
                {
                    b.Navigation("MoneyServicePrice");
                });

            modelBuilder.Entity("Models.ParcelOrder", b =>
                {
                    b.Navigation("TrackHistories");
                });

            modelBuilder.Entity("Models.ParcelService", b =>
                {
                    b.Navigation("ParcelOrders");

                    b.Navigation("ParcelServicePrice");
                });

            modelBuilder.Entity("Models.ParcelType", b =>
                {
                    b.Navigation("ParcelOrders");

                    b.Navigation("ParcelServicePrice");
                });

            modelBuilder.Entity("Models.Pincode", b =>
                {
                    b.Navigation("OfficeBranches");

                    b.Navigation("ReceiverPincodeMO");

                    b.Navigation("ReceiverPincodePO");

                    b.Navigation("SenderPincodeMO");

                    b.Navigation("SenderPincodePO");
                });

            modelBuilder.Entity("Models.WeightScope", b =>
                {
                    b.Navigation("ParcelServicePrice");
                });

            modelBuilder.Entity("Models.ZoneType", b =>
                {
                    b.Navigation("MoneyServicePrice");

                    b.Navigation("ParcelServicePrice");
                });
#pragma warning restore 612, 618
        }
    }
}
